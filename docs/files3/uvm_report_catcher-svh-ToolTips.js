NDContentPage.OnToolTipsLoaded({70:"<div class=\"NDToolTip TEnumeration LSystemVerilog\"><div class=\"TTSummary\">Defines all possible values for report severity.</div></div>",75:"<div class=\"NDToolTip TEnumeration LSystemVerilog\"><div class=\"TTSummary\">Defines all possible values for report actions. Each report is configured to execute one or more actions, determined by the bitwise OR of any or all of the following enumeration constants.</div></div>",1660:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1660\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_callbacks#<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> T=uvm_object, <span class=\"SHKeyword\">type</span> CB=uvm_callback)</span></div></div></div><div class=\"TTSummary\">The ~uvm_callbacks~ class provides a base class for implementing callbacks, which are typically used to modify or augment component behavior without changing the component class. To work effectively, the developer of the component class defines a set of &quot;hook&quot; methods that enable users to customize certain behaviors of the component in a manner that is controlled by the component developer. The integrity of the component\'s overall behavior is intact, while still allowing certain customizable actions by the user.</div></div>",1681:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1681\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_callback</div></div></div><div class=\"TTSummary\">The ~uvm_callback~ class is the base class for user-defined callback classes.&nbsp; Typically, the component developer defines an application-specific callback class that extends from this class. In it, he defines one or more virtual methods, called a ~callback interface~, that represent the hooks available for user override.</div></div>",1911:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1911\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_report_catcher</div></div></div><div class=\"TTSummary\">The uvm_report_catcher is used to catch messages issued by the uvm report server. Catchers are uvm_callbacks#(&lt;uvm_report_object&gt;,uvm_report_catcher) objects, so all factilities in the uvm_callback and uvm_callbacks#(T,CB) classes are available for registering catchers and controlling catcher state.&nbsp; The uvm_callbacks#(&lt;uvm_report_object&gt;,uvm_report_catcher) class is aliased to ~uvm_report_cb~ to make it easier to use.&nbsp; Multiple report catchers can be registered with a report object. The catchers can be registered as default catchers which catch all reports on all uvm_report_object reporters, or catchers can be attached to specific report objects (i.e. components).</div></div>",1933:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1933\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">pure virtual function</span> action_e catch()</div></div><div class=\"TTSummary\">This is the method that is called for each registered report catcher.&nbsp; There are no arguments to this function. The Current Message State interface methods can be used to access information about the current message being processed.</div></div>",1939:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1939\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected function void</span> issue()</div></div><div class=\"TTSummary\">Immediately issues the message which is currently being processed. This is useful if the message is being ~CAUGHT~ but should still be emitted.</div></div>",1956:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">uvm_report_server is a global server that processes all of the reports generated by an uvm_report_handler. None of its methods are intended to be called by normal testbench code, although in some circumstances the virtual methods process_report and/or compose_uvm_info may be overloaded in a subclass.</div></div>",1979:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1979\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"6\" data-NarrowColumnCount=\"5\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/6\" style=\"grid-area:1/1/2/2\"><span class=\"SHKeyword\">virtual function void</span> summarize(</div><div class=\"PType InFirstParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\">UVM_FILE&nbsp;</div><div class=\"PName\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"2/2/3/3\" style=\"grid-area:1/3/2/4\">file</div><div class=\"PDefaultValueSeparator\" data-WideGridArea=\"1/4/2/5\" data-NarrowGridArea=\"2/3/3/4\" style=\"grid-area:1/4/2/5\">&nbsp=&nbsp;</div><div class=\"PDefaultValue InLastParameterColumn\" data-WideGridArea=\"1/5/2/6\" data-NarrowGridArea=\"2/4/3/5\" style=\"grid-area:1/5/2/6\"><span class=\"SHNumber\">0</span></div><div class=\"PAfterParameters\" data-WideGridArea=\"1/6/2/7\" data-NarrowGridArea=\"3/1/4/6\" style=\"grid-area:1/6/2/7\">)</div></div></div></div><div class=\"TTSummary\">See uvm_report_object::report_summarize method.</div></div>",1996:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1996\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_report_object</div></div></div><div class=\"TTSummary\">The uvm_report_object provides an interface to the UVM reporting facility.&nbsp; Through this interface, components issue the various messages that occur during simulation. Users can configure what actions are taken and what file(s) are output for individual messages from a particular component or for all messages from all components in the environment. Defaults are applied where there is no explicit configuration.</div></div>"});