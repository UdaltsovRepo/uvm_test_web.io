NDContentPage.OnToolTipsLoaded({36:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype36\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_reg_adapter</div></div></div><div class=\"TTSummary\">This class defines an interface for converting between uvm_reg_bus_op and a specific bus transaction.</div></div>",378:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype378\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_reg_block</div></div></div><div class=\"TTSummary\">Block abstraction base class</div></div>",469:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype469\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_sequence<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> BASE=uvm_sequence #(uvm_reg_item))</span></div></div></div><div class=\"TTSummary\">This class provides base functionality for both user-defined RegModel test sequences and &quot;register translation sequences&quot;.</div></div>",470:"<div class=\"NDToolTip TVariable LSystemVerilog\"><div id=\"NDPrototype470\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\">uvm_reg_block model</div></div><div class=\"TTSummary\">Block abstraction this sequence executes on, defined only when this sequence is a user-defined test sequence.</div></div>",471:"<div class=\"NDToolTip TVariable LSystemVerilog\"><div id=\"NDPrototype471\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\">uvm_reg_adapter adapter</div></div><div class=\"TTSummary\">Adapter to use for translating between abstract register transactions and physical bus transactions, defined only when this sequence is a translation sequence.</div></div>",561:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype561\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_item</div></div></div><div class=\"TTSummary\">Defines an abstract register transaction item. No bus-specific information is present, although a handle to a uvm_reg_map is provided in case a user wishes to implement a custom address translation algorithm.</div></div>",967:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype967\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_sequencer_base</div></div></div><div class=\"TTSummary\">Controls the flow of sequences, which generate the stimulus (sequence item transactions) that is passed on to drivers for execution.</div></div>",984:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype984\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_sequence#<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> REQ = uvm_sequence_item, <span class=\"SHKeyword\">type</span> RSP = REQ)</span></div></div></div><div class=\"TTSummary\">The uvm_sequence class provides the interfaces necessary in order to create streams of sequence items and/or other sequences.</div></div>",13:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype13\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_mem_built_in_seq</div></div></div><div class=\"TTSummary\">Sequence that executes a user-defined selection of pre-defined register and memory test sequences.</div></div>",160:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype160\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_shared_access_seq</div></div></div><div class=\"TTSummary\">Verify the accessibility of a shared register by writing through each address map then reading it via every other address maps in which the register is readable and the backdoor, making sure that the resulting value matches the mirrored value.</div></div>",163:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype163\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_mem_shared_access_seq</div></div></div><div class=\"TTSummary\">Verify the accessibility of a shared memory by writing through each address map then reading it via every other address maps in which the memory is readable and the backdoor, making sure that the resulting value matches the written value.</div></div>",166:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype166\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_mem_shared_access_seq</div></div></div><div class=\"TTSummary\">Verify the accessibility of all shared registers and memories in a block by executing the uvm_reg_shared_access_seq and uvm_mem_shared_access_seq sequence respectively on every register and memory within it.</div></div>",236:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype236\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_mem_single_walk_seq</div></div></div><div class=\"TTSummary\">Runs the walking-ones algorithm on the memory given by the mem property, which must be assigned prior to starting this sequence.</div></div>",241:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype241\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_mem_walk_seq</div></div></div><div class=\"TTSummary\">Verifies the all memories in a block by executing the uvm_mem_single_walk_seq sequence on every memory within it.</div></div>",318:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype318\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_single_access_seq</div></div></div><div class=\"TTSummary\">Verify the accessibility of a register by writing through its default address map then reading it via the backdoor, then reversing the process, making sure that the resulting value matches the mirrored value.</div></div>",321:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype321\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_access_seq</div></div></div><div class=\"TTSummary\">Verify the accessibility of all registers in a block by executing the uvm_reg_single_access_seq sequence on every register within it.</div></div>",325:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype325\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_mem_access_seq</div></div></div><div class=\"TTSummary\">Verify the accessibility of all registers and memories in a block by executing the uvm_reg_access_seq and uvm_mem_access_seq sequence respectively on every register and memory within it.</div></div>",344:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype344\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_mem_hdl_paths_seq</div></div></div><div class=\"TTSummary\">Verify the correctness of HDL paths specified for registers and memories.</div></div>",476:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype476\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_reg_frontdoor</div></div></div><div class=\"TTSummary\">Facade class for register and memory frontdoor access.</div></div>",553:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype553\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_mem_single_access_seq</div></div></div><div class=\"TTSummary\">Verify the accessibility of a memory by writing through its default address map then reading it via the backdoor, then reversing the process, making sure that the resulting value matches the written value.</div></div>",556:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype556\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_mem_access_seq</div></div></div><div class=\"TTSummary\">Verify the accessibility of all memories in a block by executing the uvm_mem_single_access_seq sequence on every memory within it.</div></div>",591:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype591\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_single_bit_bash_seq</div></div></div><div class=\"TTSummary\">Verify the implementation of a single register by attempting to write 1\'s and 0\'s to every bit in it, via every address map in which the register is mapped, making sure that the resulting value matches the mirrored value.</div></div>",594:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype594\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_bit_bash_seq</div></div></div><div class=\"TTSummary\">Verify the implementation of all registers in a block by executing the uvm_reg_single_bit_bash_seq sequence on it.</div></div>",598:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype598\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_reg_hw_reset_seq</div></div></div><div class=\"TTSummary\">Test the hard reset values of registers</div></div>"});