NDContentPage.OnToolTipsLoaded({1561:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1561\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_component</div></div></div><div class=\"TTSummary\">The uvm_component class is the root base class for UVM components. In addition to the features inherited from uvm_object and uvm_report_object, uvm_component provides the following interfaces:</div></div>",1888:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1888\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_component_registry#<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> T=uvm_component, <span class=\"SHKeyword\">string</span> Tname=<span class=\"SHString\">&quot;&lt;unknown&gt;&quot;</span>)</span></div></div></div><div class=\"TTSummary\">The uvm_component_registry serves as a lightweight proxy for a component of type ~T~ and type name ~Tname~, a string. The proxy enables efficient registration with the uvm_factory. Without it, registration would require an instance of the component itself.</div></div>",1896:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1896\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_object_registry#<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> T=uvm_object, <span class=\"SHKeyword\">string</span> Tname=<span class=\"SHString\">&quot;&lt;unknown&gt;&quot;</span>)</span></div></div></div><div class=\"TTSummary\">The uvm_object_registry serves as a lightweight proxy for an uvm_object of type ~T~ and type name ~Tname~, a string. The proxy enables efficient registration with the uvm_factory. Without it, registration would require an instance of the object itself.</div></div>",2037:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2037\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_factory</div></div></div><div class=\"TTSummary\">As the name implies, uvm_factory is used to manufacture (create) UVM objects and components. Only one instance of the factory is present in a given simulation (termed a singleton). Object and component types are registered with the factory using lightweight proxies to the actual objects and components being created. The uvm_object_registry #(T,Tname) and uvm_component_registry #(T,Tname) class are used to proxy uvm_objects and uvm_components.</div></div>",2060:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype2060\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"6\" data-NarrowColumnCount=\"5\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/6\" style=\"grid-area:1/1/2/2\"><span class=\"SHKeyword\">virtual function</span> uvm_object create_object (</div><div class=\"PType InFirstParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\"><span class=\"SHKeyword\">string</span>&nbsp;</div><div class=\"PName\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"2/2/3/3\" style=\"grid-area:1/3/2/4\">name</div><div class=\"PDefaultValueSeparator\" data-WideGridArea=\"1/4/2/5\" data-NarrowGridArea=\"2/3/3/4\" style=\"grid-area:1/4/2/5\">&nbsp=&nbsp;</div><div class=\"PDefaultValue InLastParameterColumn\" data-WideGridArea=\"1/5/2/6\" data-NarrowGridArea=\"2/4/3/5\" style=\"grid-area:1/5/2/6\"><span class=\"SHString\">&quot;&quot;</span></div><div class=\"PAfterParameters\" data-WideGridArea=\"1/6/2/7\" data-NarrowGridArea=\"3/1/4/6\" style=\"grid-area:1/6/2/7\">)</div></div></div></div><div class=\"TTSummary\">Creates a new object with the optional ~name~.&nbsp; An object proxy (e.g., uvm_object_registry #(T,Tname)) implements this method to create an object of a specific type, T.</div></div>",2061:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype2061\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"4\" data-NarrowColumnCount=\"3\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/3/2\" data-NarrowGridArea=\"1/1/2/4\" style=\"grid-area:1/1/3/2\"><span class=\"SHKeyword\">virtual function</span> uvm_component create_component (</div><div class=\"PType InFirstParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\"><span class=\"SHKeyword\">string</span>&nbsp;</div><div class=\"PName InLastParameterColumn\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"2/2/3/3\" style=\"grid-area:1/3/2/4\">name,</div><div class=\"PType InFirstParameterColumn\" data-WideGridArea=\"2/2/3/3\" data-NarrowGridArea=\"3/1/4/2\" style=\"grid-area:2/2/3/3\">uvm_component&nbsp;</div><div class=\"PName InLastParameterColumn\" data-WideGridArea=\"2/3/3/4\" data-NarrowGridArea=\"3/2/4/3\" style=\"grid-area:2/3/3/4\">parent</div><div class=\"PAfterParameters\" data-WideGridArea=\"2/4/3/5\" data-NarrowGridArea=\"4/1/5/4\" style=\"grid-area:2/4/3/5\">)</div></div></div></div><div class=\"TTSummary\">Creates a new component, passing to its constructor the given ~name~ and ~parent~. A component proxy (e.g. uvm_component_registry #(T,Tname)) implements this method to create a component of a specific type, T.</div></div>",2095:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2095\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_object</div></div></div><div class=\"TTSummary\">The uvm_object class is the base class for all UVM data and hierarchical classes. Its primary role is to define a set of methods for such common operations as create, copy, compare, print, and record. Classes deriving from uvm_object must implement the pure virtual methods such as create and get_type_name.</div></div>",1888:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1888\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_component_registry#<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> T=uvm_component, <span class=\"SHKeyword\">string</span> Tname=<span class=\"SHString\">&quot;&lt;unknown&gt;&quot;</span>)</span></div></div></div><div class=\"TTSummary\">The uvm_component_registry serves as a lightweight proxy for a component of type ~T~ and type name ~Tname~, a string. The proxy enables efficient registration with the uvm_factory. Without it, registration would require an instance of the component itself.</div></div>",1896:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1896\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_object_registry#<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> T=uvm_object, <span class=\"SHKeyword\">string</span> Tname=<span class=\"SHString\">&quot;&lt;unknown&gt;&quot;</span>)</span></div></div></div><div class=\"TTSummary\">The uvm_object_registry serves as a lightweight proxy for an uvm_object of type ~T~ and type name ~Tname~, a string. The proxy enables efficient registration with the uvm_factory. Without it, registration would require an instance of the object itself.</div></div>"});