NDContentPage.OnToolTipsLoaded({1367:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1367\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_tlm_if_base#<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> T1=<span class=\"SHKeyword\">int</span>, <span class=\"SHKeyword\">type</span> T2=<span class=\"SHKeyword\">int</span>)</span></div></div></div><div class=\"TTSummary\">This class declares all of the methods of the TLM API.</div></div>",1391:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1391\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_tlm_fifo_base#<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> T=<span class=\"SHKeyword\">int</span>)</span></div></div></div><div class=\"TTSummary\">This class is the base for &lt;uvm_tlm_fifo #(T)&gt;. It defines the TLM exports through which all transaction-based FIFO operations occur. It also defines default implementations for each inteface method provided by these exports.</div></div>",1479:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1479\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_tlm_fifo<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> T=<span class=\"SHKeyword\">int</span>)</span></div></div></div><div class=\"TTSummary\">This class provides storage of transactions between two independently running processes. Transactions are put into the FIFO via the ~put_export~.&nbsp; transactions are fetched from the FIFO in the order they arrived via the ~get_peek_export~. The ~put_export~ and ~get_peek_export~ are inherited from the uvm_tlm_fifo_base #(T) super class, and the interface methods provided by these exports are defined by the uvm_tlm_if_base #(T1,T2) class.</div></div>",1482:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1482\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual function int</span> size()</div></div><div class=\"TTSummary\">Returns the capacity of the FIFO-- that is, the number of entries the FIFO is capable of holding. A return value of 0 indicates the FIFO capacity has no limit.</div></div>",1483:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1483\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual function int</span> used()</div></div><div class=\"TTSummary\">Returns the number of entries put into the FIFO.</div></div>",1484:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1484\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual function bit</span> is_empty()</div></div><div class=\"TTSummary\">Returns 1 when there are no entries in the FIFO, 0 otherwise.</div></div>",1561:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1561\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">virtual</span></div><div class=\"CPName\">uvm_component</div></div></div><div class=\"TTSummary\">The uvm_component class is the root base class for UVM components. In addition to the features inherited from uvm_object and uvm_report_object, uvm_component provides the following interfaces:</div></div>",1487:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1487\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">uvm_tlm_analysis_fifo<span class=\"TemplateSignature\"> #(<span class=\"SHKeyword\">type</span> T = <span class=\"SHKeyword\">int</span>)</span></div></div></div><div class=\"TTSummary\">An analysis_fifo is a uvm_tlm_fifo with an unbounded size and a write interface.&nbsp; It can be used any place a uvm_analysis_imp is used. Typical usage is as a buffer between an uvm_analysis_port in an initiator component and TLM1 target component.</div></div>"});